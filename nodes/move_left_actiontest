#!/usr/bin/env python


"""

PUBLSIHERS:
    +

SUBSCRIBERS:
    +
"""

from __future__ import division

import sys
import copy
import rospy
import roslib

import actionlib
roslib.load_manifest('terminator')
import terminator.msg



class LeftArm(object):
    # create messages that are used to publish feedback/result
    _gunfeedback = terminator.msg.CommandsFeedback()
    _gunresult = terminator.msg.CommandsResult()

    _aimfeedback = terminator.msg.CommandsFeedback()
    _aimresult = terminator.msg.CommandsResult()

    def __init__(self):
        print("init")
        self._asgun = actionlib.SimpleActionServer("guncommander", terminator.msg.CommandsAction, execute_cb=self.gunexecute_cb, auto_start = False)
        self._asaim = actionlib.SimpleActionServer("aimcommander", terminator.msg.CommandsAction, execute_cb=self.aimexecute_cb, auto_start = False)

        self._asgun.start()
        print("gun started")

        self._asaim.start()
        print("aim started")

    def gunexecute_cb(self, goal):
        print("in gun cb")
        # helper variables
        r = rospy.Rate(1)
        success = True

        if goal.actionname == "get_gun":
            if self._asgun.is_preempt_requested():
                rospy.loginfo('%s: Preempted' % 'left_arm got gun')
                self._asgun.set_preempted()
                success = False
            print("yay - got gun")
        else:
            print(":( - didn't get gun")

        if success:
            self._gunresult.completion = True
            rospy.loginfo('%s: Succeeded' % 'left_arm got gun')
            print(self._gunresult.completion)
            self._asgun.set_succeeded(self._gunresult)
        else:
            self._gunresult.completion = False
            self._asgun.set_succeeded(self._gunresult)

    def aimexecute_cb(self, goal):
        print("in aim cb")
        # helper variables
        r = rospy.Rate(1)
        success = True

        if goal.actionname == "aim_gun":
            if self._asaim.is_preempt_requested():
                rospy.loginfo('%s: Preempted' % self._action_name)
                self._asaim.set_preempted()
                success = False
            print("yay - aimed gun")
        else:
            print(":( - didn't aim gun")

        if success:
            self._aimresult.completion = True
            rospy.loginfo('%s: Succeeded' % 'left_arm aimed gun')
            print(self._aimresult.completion)
            self._asaim.set_succeeded(self._aimresult)
        else:
            self._aimresult.completion = False
            self._asaim.set_succeeded(self._aimresult)



if __name__ == '__main__':
    rospy.init_node('left_arm')
    server = LeftArm()
    rospy.spin()










#
