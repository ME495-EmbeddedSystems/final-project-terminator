#!/usr/bin/env python


"""

PUBLSIHERS:
    +

SUBSCRIBERS:
    +
"""

from __future__ import division

import sys
import copy
import rospy
import roslib

import actionlib
roslib.load_manifest('terminator')
import terminator.msg



class LeftArm(object):
    # create messages that are used to publish feedback/result
    _feedback = terminator.msg.CommandsFeedback()
    _result = terminator.msg.CommandsResult()

    def __init__(self):
        print("init")
        self._as = actionlib.SimpleActionServer("commander", terminator.msg.CommandsAction, execute_cb=self.execute_cb, auto_start = False)

        self._as.start()
        print("gun started")
        print("aim started")

    def execute_cb(self, goal):
        print("in cb")
        # helper variables
        r = rospy.Rate(1)
        success = True

        if goal.gunaction == "get_gun":
            if self._as.is_preempt_requested():
                rospy.loginfo('%s: Preempted' % 'left_arm got gun')
                self._as.set_preempted()
                success = False
            print("yay - got gun")


            if success:
                self._result.completion = True
                rospy.loginfo('%s: Succeeded' % 'left_arm got gun')
                print(self._result.completion)
                self._as.set_succeeded(self._result)
            else:
                self._result.completion = False
                self._as.set_succeeded(self._result)
        else:
            print(":( - didn't get gun")



        print("in aim cb")
        # helper variables
        r = rospy.Rate(1)
        success = True

        if goal.aimaction == "aim_gun":
            if self._as.is_preempt_requested():
                rospy.loginfo('%s: Preempted' % self._action_name)
                self._as.set_preempted()
                success = False
            print("yay - aimed gun")

            if success:
                self._result.completion = True
                rospy.loginfo('%s: Succeeded' % 'left_arm aimed gun')
                print(self._result.completion)
                self._as.set_succeeded(self._result)
            else:
                self._result.completion = False
                self._as.set_succeeded(self._result)
        else:
            print(":( - didn't aim gun")


if __name__ == '__main__':
    rospy.init_node('left_arm')
    server = LeftArm()
    rospy.spin()










#
