#!/usr/bin/env python


"""

PUBLSIHERS:
    +

SUBSCRIBERS:
    +
"""

from __future__ import division

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
from moveit_msgs.msg import Grasp
import geometry_msgs.msg
from geometry_msgs.msg import Point, Quaternion, Pose, PoseStamped
import numpy as np
from std_msgs.msg import String, Bool
from moveit_commander.conversions import pose_to_list
import baxter_interface
from baxter_interface import Gripper, CHECK_VERSION
from sensor_msgs.msg import Range
import tf.transformations as tr
from tf.transformations import quaternion_matrix
from tf.transformations import quaternion_from_euler
from tf.transformations import euler_from_matrix



class RightArm(object):
    """ manipulates the right arm """

    def __init__(self):

        rospy.loginfo("Initializing Baxter")
        super(RightArm, self).__init__()

        #joint_state_topic = ['joint_states:=/joint_states_desired']
        joint_state_topic = ['joint_states:=/robot/joint_states']
        moveit_commander.roscpp_initialize(joint_state_topic)

        rospy.init_node("right_arm", anonymous=True)


        # TODO: move this to the commander main node
        baxter_interface.RobotEnable().enable()
        rospy.sleep(0.25)
        print("Baxter is enabled")

        moveit_commander.roscpp_initialize(sys.argv)
        self.robot = moveit_commander.RobotCommander()
        self.scene = moveit_commander.PlanningSceneInterface()


        self.right_group = moveit_commander.MoveGroupCommander("right_arm")

        # left group is only to read pose of the gripper to
        # help position the right gripper
        self.left_group = moveit_commander.MoveGroupCommander("left_arm")

        # Planning and Execution parameters
        self.position_tol = 0.03
        self.orientation_tol = 0.3

        self.right_group.set_goal_position_tolerance(self.position_tol)
        self.right_group.set_goal_orientation_tolerance(self.orientation_tol)
        self.right_group.set_planning_time(10.0)
        self.right_group.allow_replanning(True)
        self.right_group.set_max_velocity_scaling_factor(0.2)
        self.right_group.set_max_acceleration_scaling_factor(0.1)


        # gripper
        self.right_gripper = Gripper('right', CHECK_VERSION)
        # Reboot Gripper
        self.right_gripper.reboot()
        # Calibrate Gripper
        self.right_gripper.calibrate()
        # Open Gripper
        self.right_gripper.open()

        # gripper position tuning parameters
        self.d = 0.0762

        self.x_coord = 0.1016
        self.y_coord = 0.1143
        self.z_coord = 0.0508


        # trajectory in RVIZ
        self.display_trajectory_publisher = rospy.Publisher(
            '/move_group/display_planned_path',
            moveit_msgs.msg.DisplayTrajectory,
            queue_size=20)


        # place arm in init position
        self.arm_init_position()

        print("Done Initializing Baxter")



    def arm_init_position(self):
        """ places right arm is a predefined position during start up """

        print("Moving right arm to initial pose")
        pose_goal = geometry_msgs.msg.Pose()
        pose_goal.orientation.x = -0.41
        pose_goal.orientation.y = 0.60
        pose_goal.orientation.z = 0.35
        pose_goal.orientation.w = 0.58

        pose_goal.position.x = 0.68
        pose_goal.position.y = -0.25
        pose_goal.position.z = 0.30

        right_EE_pose = self.right_group.get_current_pose().pose

        plan, fraction = self.plan_cartesian_path(right_EE_pose, pose_goal)
        print("Fraction of path covered to initial position")
        print(fraction)

        # execute path
        self.right_group.execute(plan, wait=True)
        #self.left_group.go(wait=True)
        self.right_group.stop()
        self.right_group.clear_pose_targets()

        rospy.sleep(4)

        right_EE_pose = self.right_group.get_current_pose().pose
        if self.made_it(pose_goal, right_EE_pose):
            print("Right Arm is in initial position")

        else:
            print("Right is Not in initial position")



    def position_trigger(self):
        """ places the right gripper at the trigger

        1) move gripper to stand off location
        2) place gripper on trigger

        """

        # stage 1
        print("============ Move to gun ============")

        right_EE_pose = self.right_group.get_current_pose().pose

        # place perpendicular to the left end effector
        left_EE_pose = self.left_group.get_current_pose().pose

        # transform from baxter to left gripper
        Tbl = self.get_transform(left_EE_pose)
        #Tbr = self.get_transform(right_EE_pose)

        #print("T from Baxter to Left Gripper")
        #print(Tbl)

        angle_x = -np.pi/2

        # transform from baxter to right gripper standoff
        T1 = np.array([[1,  0,               0,                     0],
                       [0,  np.cos(angle_x), -np.sin(angle_x),      0],
                       [0,  np.sin(angle_x),  np.cos(angle_x),      0],
                       [0,  0,               0,                     1]])

        T2 = np.array([[1, 0, 0,  -self.x_coord],
                       [0, 1, 0,  self.y_coord],
                       [0, 0, 1,  -self.z_coord],
                       [0, 0, 0,  1]])

        Tlrs = np.dot(T1, T2)


        Tbrs = np.dot(Tbl, Tlrs)
        #Tbrs = np.dot(Tbr, Tlrs)

        #print("T from Baxter to Right Gripper Standoff")
        #print(Tbrs)


        quat, trans = self.extract_pose(Tbrs)

        pose_goal = geometry_msgs.msg.Pose()

        pose_goal.position.x = trans[0]
        pose_goal.position.y = trans[1]
        pose_goal.position.z = trans[2]

        pose_goal.orientation.x = quat[0]
        pose_goal.orientation.y = quat[1]
        pose_goal.orientation.z = quat[2]
        pose_goal.orientation.w = quat[3]


        # plan from right EE to goal
        plan, fraction = self.plan_cartesian_path(right_EE_pose, pose_goal)

        print("The fraction of path covered")
        print(fraction)

        # display plan in rviz
        self.display_trajectory(plan)

        rospy.sleep(2)


        print("============ Press `Enter` to move gripper ============")
        raw_input()

        try:
            # execute path
            self.right_group.execute(plan, wait=True)
            self.right_group.stop()
            self.right_group.clear_pose_targets()

            # wait for baxter to get to goal
            rospy.sleep(4)

        except (rospy.ServiceException, rospy.ROSException), e:
            rospy.loginfo("Service call failed: %s" % (e,))



        # stage 2
        print("============ Move to trigger ============")

        right_EE_pose = self.right_group.get_current_pose().pose

        pose_goal.position.x = right_EE_pose.position.x
        pose_goal.position.y = right_EE_pose.position.y + self.d
        pose_goal.position.z = right_EE_pose.position.z

        pose_goal.orientation.x = right_EE_pose.orientation.x
        pose_goal.orientation.y = right_EE_pose.orientation.y
        pose_goal.orientation.z = right_EE_pose.orientation.z
        pose_goal.orientation.w = right_EE_pose.orientation.w


        # plan from right EE to goal
        plan, fraction = self.plan_cartesian_path(right_EE_pose, pose_goal)

        print("The fraction of path covered")
        print(fraction)

        # display plan in rviz
        self.display_trajectory(plan)

        rospy.sleep(2)



        print("============ Press `Enter` to move gripper ============")
        raw_input()

        try:
            # execute path
            self.right_group.execute(plan, wait=True)
            self.right_group.stop()
            self.right_group.clear_pose_targets()

            # wait for baxter to get to goal
            rospy.sleep(4)

        except (rospy.ServiceException, rospy.ROSException), e:
            rospy.loginfo("Service call failed: %s" % (e,))



        # stage 3
        print("============ Press `Enter` to close left gripper ============")
        raw_input()
        self.right_gripper.close()
        rospy.sleep(2)

        self.right_gripper.open()




    def plan_cartesian_path(self, right_EE_pose, goal):
        """ plans a cartesian path using waypoints

        Args:
            left_EE_pose (Pose): pose of the left end effector
            goal (Pose): pose of the goal configuration

        """

        print("Terminator Planning Trajectory")

        iter = 20
        waypoints = []

        xiter = np.linspace(right_EE_pose.position.x, goal.position.x, iter)
        yiter = np.linspace(right_EE_pose.position.y, goal.position.y, iter)
        ziter = np.linspace(right_EE_pose.position.z, goal.position.z, iter)

        for i in range(iter):
            p = copy.deepcopy(right_EE_pose)
            p.position.x = xiter[i]
            p.position.y = yiter[i]
            p.position.z = ziter[i]

            # last waypoint use pose of goal
            if i == iter - 1:

                p = copy.deepcopy(goal)
                p.position.x = xiter[i]
                p.position.y = yiter[i]
                p.position.z = ziter[i]

            waypoints.append(p)

        #self.left_group.set_max_velocity_scaling_factor(0.1)
        #self.left_group.set_max_acceleration_scaling_factor(0.1)

        plan, fraction = self.right_group.compute_cartesian_path(waypoints, 0.01, 0.0)

        #self.left_group.set_max_velocity_scaling_factor(0.6)
        #self.left_group.set_max_acceleration_scaling_factor(0.6)

        return plan, fraction



    def display_trajectory(self, plan):
        """ Published planned trajectory in rviz

        Args:
            plan (): motion plan to goal
        """

        display_traj = moveit_msgs.msg.DisplayTrajectory()
        display_traj.trajectory_start = self.robot.get_current_state()
        display_traj.trajectory.append(plan)
        self.display_trajectory_publisher.publish(display_traj)


    def made_it(self, goal, actual):
        """ Test if end effector made it to target

        Args:
        goal (Pose): target for robot
        actual (Pose): where robot actually is

        Returns:
        bool: True for success
        """

        goal = pose_to_list(goal)
        actual = pose_to_list(actual)

        pos_goal = True
        orient_goal = True

        # check if final position is within tolerance
        for index in range(3):
            if abs(actual[index] - goal[index]) > self.position_tol:
                pos_goal = False

        # check if final orientation is within tolerance
        for index in range(3, 6):
            if abs(actual[index] - goal[index]) > self.orientation_tol:
                orient_goal = False

        if pos_goal and orient_goal:
            return True

        return False



    def get_transform(self, pose):
        """ computes the transformation matrix given a pose msg

        Args:
            pose (Pose): pose of a rigid body

        Returns:
            T (np.array): homogenous transformation matrix
        """

        quat_list = [pose.orientation.x, pose.orientation.y, pose.orientation.z, pose.orientation.w]

        homo_rot = quaternion_matrix(quat_list)

        T = np.array([[homo_rot[0][0], homo_rot[0][1], homo_rot[0][2], pose.position.x],
                      [homo_rot[1][0], homo_rot[1][1], homo_rot[1][2], pose.position.y],
                      [homo_rot[2][0], homo_rot[2][1], homo_rot[2][2], pose.position.z],
                      [0,              0,              0,              1]])

        return T


    def extract_pose(self, T):
        """ extracts the quaternion and translation vector from a homogenous
        tranformation matrix

        Args:
            T (np.array): homogenous transformation matrix

        Returns:
            quat (np.array): quaternion represting orientation of rigid body
            trans (np.array): translation vector represting position of rigid body
        """

        # extract euler angles
        rot = np.array([[T[0][0], T[0][1], T[0][2]],
                        [T[1][0], T[1][1], T[1][2]],
                        [T[2][0], T[2][1], T[2][2]]])


        ax, ay, az = euler_from_matrix(rot)
        quat = quaternion_from_euler(ax, ay, az)

        trans = np.array([T[0][3], T[1][3], T[2][3]])

        return quat, trans



def main():

    try:
        right_arm = RightArm()

        right_arm.position_trigger()

    except rospy.ROSInterruptException:
        return
    except KeyboardInterrupt:
        return

    rospy.spin()


if __name__ == '__main__':
    main()




















#
