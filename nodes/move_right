"""
text
"""

import argparse
import struct
import sys
import copy
import rospy
import rospkg
import baxter_interface

from gazebo_msgs.srv import SpawnModel, DeleteModel
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from std_msgs.msg import Header, Empty
from baxter_core_msgs.srv import SolvePositionIK, SolvePositionIKRequest

class RightArm(object):
    """
    manipulates Baxter's right arm
    """
    def __init__(self, limb, hover_distance = 0.15, verbose=True):
        self._limb_name = limb # string
        self._hover_distance = hover_distance # in meters
        self._verbose = verbose # bool
        self._limb = baxter_interface.Limb(limb)
        self._gripper = baxter_interface.Gripper(limb)
        ns = "ExternalTools/" + limb + "/PositionKinematicsNode/IKService"
        self._iksvc = rospy.ServiceProxy(ns, SolvePositionIK)

        self.trigger_sub = rospy.Subscriber("/gun_pose", Pose, self.trigger_sub_callback)

    def trigger_sub_callback(self, msg):
        """
        text
        """

    def gripper_open(self):
        self._gripper.open()
        rospy.sleep(1.0)

    def gripper_close(self):
        self._gripper.close()
        rospy.sleep(1.0)

    def _servo_to_pose(self, pose):
        # servo down to release
        joint_angles = self.ik_request(pose)
        self._guarded_move_to_joint_position(joint_angles)

    def gripper_close(self):
        self._gripper.close()
        rospy.sleep(1.0)

    def _retract(self):
        # retrieve current pose from endpoint
        current_pose = self._limb.endpoint_pose()
        ik_pose = Pose()
        ik_pose.position.x = current_pose['position'].x
        ik_pose.position.y = current_pose['position'].y
        ik_pose.position.z = current_pose['position'].z + self._hover_distance
        ik_pose.orientation.x = current_pose['orientation'].x
        ik_pose.orientation.y = current_pose['orientation'].y
        ik_pose.orientation.z = current_pose['orientation'].z
        ik_pose.orientation.w = current_pose['orientation'].w
        joint_angles = self.ik_request(ik_pose)
        # servo up from current pose
        self._guarded_move_to_joint_position(joint_angles)

    def pick(self, pose):
        # open the gripper
        self.gripper_open()
        # servo above pose
        self._approach(pose)
        # servo to pose
        self._servo_to_pose(pose)
        # close gripper
        self.gripper_close()
        # retract to clear object
        self._retract()

def main():
    """
    text
    """
    rospy.init_node("right_arm", anonymous=True)

    limb = 'right'
    hover_distance = 0.15 # meters

    trigger_pose = geometry_msgs.msg.Pose()

    pnp = PickAndPlace(limb, hover_distance)
    # An orientation for gripper fingers to be overhead and parallel to the obj
    # overhead_orientation = Quaternion(
    #                          x=-0.0249590815779,
    #                          y=0.999649402929,
    #                          z=0.00737916180073,
    #                          w=0.00486450832011)
    # block_poses = list()
    #
    # # The Pose of the block in its initial location.
    # # You may wish to replace these poses with estimates
    # # from a perception node.
    # block_poses.append(Pose(
    #     position=Point(x=0.7, y=0.15, z=-0.129),
    #     orientation=overhead_orientation))
    #
    # block_poses.append(Pose(
    #     position=Point(x=0.75, y=0.0, z=-0.129),
    #     orientation=overhead_orientation))
    # 
    # Move to the desired starting angles
    pnp.move_to_start(starting_joint_angles)
    idx = 0
    while not rospy.is_shutdown():
        print("\nPicking...")
        pnp.pick(block_poses[idx])
    return 0

if __name__ == '__main__':
    sys.exit(main())
