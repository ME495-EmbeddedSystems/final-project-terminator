#!/usr/bin/env python


import sys
import rospy
import copy
import baxter_interface
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from geometry_msgs.msg import Point, Quaternion, Pose, PoseStamped
from std_msgs.msg import String, Bool
from moveit_commander.conversions import pose_to_list
from tf.transformations import quaternion_from_euler
from terminator import *

class FinalPose(object):
	""" manipulates baxters left arm """

	def __init__(self):

		# rospy.loginfo("Ready for moving to the final pose")
		rospy.loginfo("Initializing")
		super(FinalPose, self).__init__()
		# First initialize moveit_commander and a rospy node:
		moveit_commander.roscpp_initialize(sys.argv)
		rospy.init_node("final_pose", anonymous=True)
		# Instantiate a RobotCommander object. 
		joint_state_topic = ['joint_states:=/robot/joint_states']
		moveit_commander.roscpp_initialize(joint_state_topic)
		# self.add_box()
		self.robot = moveit_commander.RobotCommander()
		# Instantiate a PlanningSceneInterface object. 
		self.scene = moveit_commander.PlanningSceneInterface()
		# Instantiate a MoveGroupCommander object. This object is an interface to a planning group
		baxter_interface.RobotEnable().enable()
		rospy.sleep(0.25)
		rospy.loginfo("Ready for moving to the final pose")

		self.left_group = moveit_commander.MoveGroupCommander('left_arm')
		self.right_group = moveit_commander.MoveGroupCommander("right_arm")
		# setting parameters
		self.position_tolerance = 0.05
		self.orientation_tolerance = 0.3
		self.left_group.set_goal_position_tolerance(self.position_tolerance)
		self.left_group.set_goal_orientation_tolerance(self.orientation_tolerance)
		self.left_group.set_planning_time(10.0)
        self.left_group.allow_replanning(True)
        self.left_group.set_max_velocity_scaling_factor(0.2)
        self.left_group.set_max_acceleration_scaling_factor(0.1)

		self.right_group.set_goal_position_tolerance(self.position_tolerance)
		self.right_group.set_goal_orientation_tolerance(self.orientation_tolerance)
		self.right_group.set_planning_time(10.0)
        self.right_group.allow_replanning(True)
        self.right_group.set_max_velocity_scaling_factor(0.2)
        self.right_group.set_max_acceleration_scaling_factor(0.1)

        self.display_trajectory_publisher = rospy.Publisher(
            '/move_group/display_planned_path',
            moveit_msgs.msg.DisplayTrajectory,
            queue_size=20)


	def move2final(self):
		curr_left_pose = self.left_group.get_current_pose().pose 
		curr_right_pose = self.right_group.get_current_pose().pose 

		left_pose_goal = geometry_msgs.msg.Pose()
		right_pose_goal = geometry_msgs.msg.Pose()


		left_pose_goal.orientation.x = -0.579534
		left_pose_goal.orientation.y = 0.646759
		left_pose_goal.orientation.z = -0.330412
		left_pose_goal.orientation.w = -0.369691

		left_pose_goal.position.x = 0.560992
		left_pose_goal.position.y = -0.0221569
		left_pose_goal.position.z = 0.107392

		print("============ Press `Enter` to move final configuration ============")
		raw_input()


		right_pose_goal.orientation.x = -0.275902
		right_pose_goal.orientation.y = 0.959828
		right_pose_goal.orientation.z = -0.0114533
		right_pose_goal.orientation.w = 0.049759

		right_pose_goal.position.x = 0.122443
		right_pose_goal.position.y = -0.695486
		right_pose_goal.position.z = -0.40463